name: Custom Discord Notifications

on:
  push:
    branches: ['**'] # Trigger on all pushes to any branch
    paths-ignore:
      - '*.md'
      - '.gitignore'
      - 'docs/'
      - 'README.md'
  create: # Trigger on branch or tag creation
  pull_request:
    types: [opened, closed, reopened] # Trigger on PR open, close (including merge), reopen
  workflow_run:
    types: [completed] # Trigger when any workflow run completes
    # --- FIX: Specify which workflows to listen for ---
    workflows: ["Deploy to EC2"] # List the names of the workflows you want to monitor

jobs:
  notify:
    runs-on: ubuntu-latest
    # --- IMPORTANT: Add permissions for workflow_run ---
    permissions:
      contents: read # Required for actions/checkout if you add steps that need repo content
      actions: read  # Crucial: Allows this workflow to read data from other workflow runs

    steps:
      # We don't need actions/checkout here unless we're reading files from the repo
      # for the notification logic itself. For event-based notifications, it's not strictly necessary.
      # - name: Checkout code
      #   uses: actions/checkout@v4

      - name: Determine Notification Message
        id: set_message # Give this step an ID to reference its outputs
        run: |
          # Initialize variables
          MESSAGE=""

          # --- Common Variables ---
          # Use raw github context for direct access, less chance of misinterpretation
          REPO_NAME="${{ github.repository }}"
          ACTOR="${{ github.actor }}"
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
          # Hardcoded Discord User ID for mentions
          DISCORD_USER_ID="1015923238674640896" 
          MENTION="<@${DISCORD_USER_ID}>"

          # --- Handle different event types ---
          if [[ "${{ github.event_name }}" == "push" ]]; then
            COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
            COMMIT_SHA_SHORT="${{ github.sha }}"
            BRANCH_NAME="${{ github.ref_name }}"
            COMPARE_URL="${{ github.event.compare }}"

            MESSAGE="üì¢ **Code Push Alert!**\n"
            MESSAGE+="**Repository:** `${REPO_NAME}`\n"
            MESSAGE+="**Branch:** `${BRANCH_NAME}`\n"
            MESSAGE+="**Pushed by:** `${ACTOR}`\n"
            MESSAGE+="**Commit:** `${COMMIT_SHA_SHORT}`\n"
            MESSAGE+="**Message:** ```\n${COMMIT_MESSAGE}\n```\n"
            MESSAGE+="[View Changes](${COMPARE_URL})"

          elif [[ "${{ github.event_name }}" == "create" ]]; then
            REF_TYPE="${{ github.event.ref_type }}"
            REF_NAME="${{ github.event.ref }}"
            
            MESSAGE="‚ú® **New ${REF_TYPE} Created!**\n"
            MESSAGE+="**Repository:** `${REPO_NAME}`\n"
            MESSAGE+="**Created by:** `${ACTOR}`"

          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_ACTION="${{ github.event.action }}"
            PR_TITLE="${{ github.event.pull_request.title }}"
            PR_NUMBER="${{ github.event.pull_request.number }}"
            PR_URL="${{ github.event.pull_request.html_url }}"
            PR_MERGED="${{ github.event.pull_request.merged }}"
            
            STATUS_TEXT="opened"
            
            if [[ "$PR_ACTION" == "closed" ]]; then
              if [[ "$PR_MERGED" == "true" ]]; then
                MESSAGE="üéâ **Pull Request Merged!**\n"
                STATUS_TEXT="merged"
              else
                MESSAGE="‚ùå **Pull Request Closed!**\n"
                STATUS_TEXT="closed"
              fi
            elif [[ "$PR_ACTION" == "opened" ]]; then
              MESSAGE="üÜï **New Pull Request!**\n"
            elif [[ "$PR_ACTION" == "reopened" ]]; then
              MESSAGE="üîÑ **Pull Request Reopened!**\n"
            fi
            
            MESSAGE+="**PR #${PR_NUMBER}:** `${PR_TITLE}`\n"
            MESSAGE+="**Repository:** `${REPO_NAME}`\n"
            MESSAGE+="**Status:** `${STATUS_TEXT}` by `${ACTOR}`\n"
            MESSAGE+="[View PR](${PR_URL})"

          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            WORKFLOW_NAME="${{ github.event.workflow_run.name }}"
            WORKFLOW_STATUS="${{ github.event.workflow_run.conclusion }}"
            WORKFLOW_URL="${{ github.event.workflow_run.html_url }}"
            
            STATUS_EMOJI="üü°"
            
            if [[ "$WORKFLOW_STATUS" == "success" ]]; then
              MESSAGE="‚úÖ **Workflow Completed Successfully!**\n"
              STATUS_EMOJI="‚úÖ"
            elif [[ "$WORKFLOW_STATUS" == "failure" ]]; then
              MESSAGE="üö® **Workflow Failed!** ${MENTION}\n" # Add mention for failures
              STATUS_EMOJI="‚ùå"
            elif [[ "$WORKFLOW_STATUS" == "cancelled" ]]; then
              MESSAGE="üö´ **Workflow Cancelled!**\n"
              STATUS_EMOJI="üö´"
            fi
            
            MESSAGE+="${STATUS_EMOJI} **Workflow:** `${WORKFLOW_NAME}`\n"
            MESSAGE+="**Repository:** `${REPO_NAME}`\n"
            MESSAGE+="**Status:** `${WORKFLOW_STATUS}`\n"
            MESSAGE+="**Triggered by:** `${ACTOR}`\n"
            MESSAGE+="[View Run](${WORKFLOW_URL})"
          fi

          # Set outputs for the next step
          echo "::set-output name=message::$MESSAGE"
        shell: bash

      - name: Send Discord Notification
        uses: Ilshidur/action-discord@master # Using the action you prefer
        if: steps.set_message.outputs.message != '' # Only send if a message was generated
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL_CUSTOM }} # Pass the full webhook URL as an environment variable
        with:
          args: ${{ steps.set_message.outputs.message }} # Main message content
